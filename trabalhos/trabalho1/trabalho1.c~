#include <pthread.h>
#include <stdlib.h>
#include <stdio.h>
#define VECSIZE 16
#define NTHREADS 4

// int valoresA[VECSIZE], valoresB[VECSIZE], separacao, indice, indiceFim, sum = 0;
pthread_mutex_t mutex;
void *calculo(void *arg){

	struct TDados *dados = (struct TDados*)arg;
	int indiceFim = *dados.indiceInicio + *dados.separacao;
	if(indiceFim < VECSIZE){
		pthread_mutex_lock(&mutex);

		int somaParcial = 0;
		for(*dados.indiceInicio; *dados.indiceInicio < indiceFim; *dados.indiceInicio++){
			somaParcial += valoresA[*dados.indiceInicio] * valoresB[*dados.indiceInicio];
		}
		*dados.indiceInicio = indiceFim;
		printf("Soma parcial da Thread[%ld].. entre %d e %d eh igual a = %d\n", *dados.numeroThread, indiceInicio, indiceFim ,somaParcial);

		*dados.sum += somaParcial;
		pthread_mutex_unlock(&mutex);
	}
}

struct TDados{
	int valoresA[VECSIZE];
	int valoresB[VECSIZE];
	int separacao = VECSIZE / NTHREADS;
	int numeroThread = -1;
	int indiceInicio = 0;
	int sum = 0;
} dados;

void criarEPopularVetores(){
	int i;
	for(i = 0; i < VECSIZE; i++){
		dados.valoresA[i] = rand()%10;
		dados.valoresB[i] = rand()%10;
	}
}

void aguardarTerminoDeThreads(pthread_t thread[]){
	int i;
	for(i = 0; i < NTHREADS; i++){
		pthread_join(thread[i], NULL);
	}
}

int main(){
	int i;
	srand(time(NULL));
	pthread_mutex_init(&mutex, NULL);
	
	criarEPopularVetores();

	pthread_t vetorThreads[NTHREADS];
	if(!(VECSIZE < NTHREADS)){
		indice = 0;
		for(i = 0; i < NTHREADS; i++){
			dados.numeroThread = i;
			pthread_create(&vetorThreads[i], NULL, calculo, (void*)dados);
		}
	} else {
		printf("O número de threads é maior que o vetor!");
		return -1;
	}
	pthread_mutex_destroy(&mutex);
	aguardarTerminoDeThreads(vetorThreads);
	printf("Soma total = %d\n", *dados.sum);
	pthread_exit(NULL);
	return 0;
}
